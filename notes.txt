Angular can be considered as platform more than just a framework
Prerequisites :- NodeJs and Typescript
you can open the repo in github codespace and run it from there.

*****Chapter 01 

Part 1 : About Angular
- Developed at Google
- Focused on exnteding HTML markup with custom attributes and
  dynamic content instead of using JS to generate the HTML at runtime
- It allowed to keep tempelate separate from controllers

Part 2 : Release and Support Cycles
- Angular uses semantic versioning to track changes and releases.
- SEM VER is both a strategy and a naming convention that helps you
  know exactly what to expect from each new release
- 3 types of Release
    - Major release: big new release( need changes in code and api) - Every 6 months 
    - Minor release: small new release that are backward compatible - 2 to 3 before next major release
    - Patch release: low-risk fixes for bugs and securties - Once per week
- Supports each new release for 18 months
    - 6 months Active Support : minor and patch releases provided
    - 12 monts LTS : only patch releases provided
- Angular releases all the updated version of their core packages with each new release
  to ensure everything once together. All the dependency update can be made using the ng 
  update command of angular cli.

Part 3 : Licencing
- released under MIT licence which means it is open source
- its use is very permissive
- MIT Licence is compatible with 
    - GNU general public licence
    - Debian's free Software guidlines
    - Free Software Foundations
    - Open Source Initiatives
- cons of MIT licence
    - Lack of warranty
    - copyright holders cannot be held liable

Part 4 : More about angular
- originally used to develop single page applications
- SPA - where content updates dynamically without the need to refresh the browser
- without angular, dev had to embed the html tempelate inside JS files
  and manipulate the dom directly
- there is nothing wrong with this approach but angular just does things differently
- today the angular ecosystem has evovled to use libraries, components, routing etc
- a platform - as you can build any type of application at scale write out of the box
- its main advantage is the ecosystem of compatible tools that work together
  like a unified platform
- to handle breaking changes during an update - follow the recommended upgrade path

Part 5 : Workflow and tooling

- 1. Angular CLI - official CL tool for angular projects under MIT
    - new version of CLI is release with new frameworks
    - eg version 15 of cli will work with angular 15
    - easy to upgrade all dependency at once
    - called ng command
    - Five imp command
        - ng build : compile code and output files into a build dire
        - ng serve : compile colde, launch a dev server, and watch for
                    file changes
        - ng generate : add new files using Angular's built in boiler-plates
        - ng lint and ng test: run Angular's lint and unit testing tool

- 2. Angular Language Service - tells code editor how to work with 
  Angular code

- 3. Angular dev Tools - a browser extenstion that gives you detailed
  debugging information in real time when running your application 
  in browser.

- 4. Angular Schematics - Collection of custom code to reuse accross 
  multiple projects. ( the ng generate commands uses Schematics
  under the hood to populate new files with the correct boilerplate
  content)

*****Chapter 2

Part 1 - Angular Decorators

- Angular cannot be used without decorators
- functions that return functions
- supply metadata about the piece of code to angular 
    - telling what the code should do
    - how it should inject code into other parts of the app
- marked using an @ symbol
- Invoked at runtime with arguments either b/w the parenthesis
  or immediately after the closing parentthesis of the decorators

- Common built in Decorators
    -@NgModule() for modules
    -@Component() for components
    -@Injectable() to define injectables
    -@Piper() to define pipes 
    -@Directives() for Directives
    -@Input() for data flowing into the component
    -@Output() for data flowing out of the component
    - more in official angular decorators

- Common decorator errors
    -Missing (), props, or prop values
    -adding semicolon at the end of the decorator
- In older version errors were reported during runtime and not at
  compile time
- use the ng build and ng serve command to find errors at compilation

Part 2 - Angular modules

- A collection of files that work together
- might include components services and pipes
- helps angular figure out how all the parts of the application 
  work together
- starting v14+ , we can use standalone components where we can 
  use files without assigning them to a module first

//Steps to create an angular project from scratch
- make sure you have node js and vs code installed
- next we have to install anngular cli which can be done using two ways
  - globally using npm i @angular/cli@ver -g
  - or an older version locally into your new project using : npx -p @angular/cli@ver ng new hello-world-project
    - if you use ng -v the global version will be used, if you use npx ng -v the local version in the repo will be used

-to create a new workspace we can do the following
  - ng new hotelinventoryapp --createApplication= False //for no default files and setup
  - ng new hotelinverntoryapp //for default files 

-angular will first make the configurations file and then download the dependency using npm install
 if this process is cancelled or stopped you can rerun the npm install command manually inside the project directory

- If we have opted out of creating a defualt application we can do ng g app hotelinventoryapp inside the project
  directory to get the default project files under a newly created folder called project/hotelinventoryapp

- when we run ng new app-name the directory structure is different. the contents of project/hotelinventoryapp are
  directly available under the root project folder instead

------------------------------Workspace Walkthrough---------------

--Starting from the bottom

 -tsconfig.spec.json and tsconfig.app.json extends tsconfig.json file
 -tsconfig.spec.json - angular generates all the unit testing files with extention spec.ts which are included in the ts env
  by this file and the transpiled output is generated in /out-tsc/spec all of which is handled by angular cli.
 -tsconfig.app.json will compile the rest of the code and produce the output in /out-tsc/app,
   it will track the main.ts file

 -karma.conf.ts - the task runner which is used to run the unit test. 
  angular comes with default unit testing framework called jasmine

- angular.json holds the current project informations

- editorconfig - to bring in the configurations of some other editor - open it to see the comments for better clearity

--- in src folder 
-styles.scss is the global stylesheet file any changes in the ui to be reflected in the code will be made here


- browserlistrc - tell you the list of browser which you project will support

-polyfills.ts 
  - polyfills are the piece of code which is added in the development environment to support a modern feature in older 
    browser who do not natively support the feature
  - polyfills.ts will contain all the polyfill code
  - some polyfills are required by angular like zone.js 
    
    - core-js: This polyfill provides support for the latest JavaScript features, such as ES6 modules and promises.
    - zone.js: This polyfill provides support for the Angular Zone API, which is used to run Angular applications in 
               a web browser. This is imported by default in this file in angular.
    - reflect-metadata: This polyfill provides support for the Reflect API, which is used to access metadata about 
               Angular classes and properties.

  - we can also add our own polyfills in this file.

- main.ts -  applicatin entry point
- index.ts - the main html file of the Single Page Applications , more details to follow
- environments folder - contains the environment variables for production and dev environments
                      - env values should be added to both files
- assets - will contain the images and static files (w.r.t frontend)

- app folder 
  - contains the files we will be modifying according to our needs

- ng serve  - use to run the application , pass -o flag to open the app in ur default browser 
------------------Introduction to mono repo-----------------
- we can  
  - Create and maintain multiple apps in the same repo
  - Use libraries within the project
  - deploy mutliple apps/libs from same repo
  - ease to share code within the project
  - npx ng app <app-name> to create a new app within the project folder <already discussed above>

- In angular.json all the projects will be listed
  - project type - application(working code with FE visuals) or library(reusable code)
  - in architectect.options - we see the details and path of all the important files of angular 
  - we can change the names of the file but the mapping should be made here properly
  - we can add all the stylessheets , scripts and assets we want to use here

---------Workflow of code----

- From main.ts to  app.module.ts
- In angular everything( component and module) is a class
- to bootstrap the application we need atleast one module called the AppModule() which is the root module
- In future we might not need this module for bootstrapping the application
- the root module( AppModule in this case) is passed as params in the bootstrapModule function 

- we are using a class decorator named @NgModule here to add props to this module passed as params
- decorators change the behaviour of a class
- We are providing the metadata information as params
- The params object will have
  -Name of the Components,Directives, Pipes used passed in declerations array
  -Name of other modules to be used default or custom, passed in the imports arrays
  -bootstrap : name of the component which should be loaded first when the module is loaded

-------Components-------

- Views which will rendered to the end user
- Whenever we declare or make a component 4 files are loaded with it
  - app.component.ts, app.component.html, app.component.scss( or css ), app.module.ts, app.component.spec.yaml
  - we will have one root component too. 

- The component.ts will be the main component file which will have the properties
  
  - in the selector the current component is defined as app-root , we have used this app-root tag to import the component
    in index.html. We will define tags in each component in the selector options.
     Note : One thing Note is here that app-root can be a common html tag name. Same tag name could be present in libraries
            we download for styling like bootstrap etc. Html5 may add an app-root tag in the future in which case this
            generic name would break the code. 
            To avoid this we prefix the selector names with the organization/project name.
            In this case we will add "hinv"(Hotel INVentory) as property.prefix in angular.json file and also update it 
            in index.html, and also in the selector name of the component.
            to reflect the changes made in angular.json we will have to restart the serve. 

  
  - add the html code of the current component in app.component.html
    Changes only in src folder will be watched by ng-serve
    I have renamed the default app.component.html as app-default.component.ts,contains useful links.
    we can also add html to componenet inline  , template : `<h1>hello world from inline component</h1>
                                                              <p>Angular is awesome</p>             
                                                              `,
  
  - similarly we can add style directly using the styles property instead of using the styles url
    -styles : [`h1{ color : red; }`] we can use inline sass too.

- TO Generate a new component : npx ng generate component component_name or npx ng g c rooms
  we have to add this new component selector tag 'hinv-rooms' in the root component.html for it to reflect changes


----------Template Syntax-------

A template combines HTML with Angular markup that can modify HTML elements before they are displayed.

- Binding Syntax - binding the application data and the DOM

  - Interpolation
    - any basic information like date, number, string can be binded
    - in the Rooms Component class add this line : hotelName = "Hilton Hotel"
    - you can then use this variable in component.html file like this : <h1>Welcome to {{hotelName}}</h1>

  - Property Binding 
    - Angular allows the use of native Html properties for binding the information to a tag property using box sytax
     eg. <div [innerText]="numberOfRooms"></div>

  - Event Binding
    - Angular allows binding events defined in the component using the banana syntax :
        <div [hidden]="hideRooms">
            Number of Rooms : 
          <div [innerText]="numberOfRooms"></div>    
        </div>
        <button (click)="toggle()">Toggle</button>

- You can use the debugger on browser in - inspect -> sources > webpacks -> src.
  add breakpoints and track the changes on the application
  use ctrl + t to search and open files directly in the inspect section

- variables are used within the tag directly eg <div [hidden]="hideRooms">
- variables are used outside dom like this <div> {{hideRooms}} </div>
- string literals are used within tags in single quotes = <div [innerText] = "'this is a string literal'">
- banana syntax for functions in the tag
- box syntax for properties in the tag

------Directives-----
- Directives are used to change the behaviour and appearance of DOM element
- Directives can implement all lifecycle hooks -- later discussed
- Directive can not have tempelate - they will just have logic

-Before a view is displayed, Angular evaluates the directives and resolves the binding syntax in the template to modify 
 the HTML elements and the DOM, according to your program data and logic.

- go through : https://angular.io/guide/architecture-components#directives

- Types of Directive
  - Structural Directives - used to add/remove elements of the dom which might give performance issues - have * prefixed
  - Attribute Directives - used to change the attributes of the dom elements

- format : <directive-name> = "<directive specific code>"

- Built in Directives
  1-*ngIf
    - In the past example of displaying the number of rooms on button toggle, we are displaying or hiding the div
      based on hiddenRoom value. Even in the hidden state the div is loaded in the dom but is not displayed which 
      reduces the performance of the app. using ngIf Directive we can load :
      <div *ngIf="rooms.availableRooms > 0">
        Rooms List
      </div> //This element will be loaded in the dom if availRooms > 0 hence increasing performance
    - It is recommended to use this ngIf
  
  --side note : 

    -optional-chaining :  //if rooms was not defined this would have thrown error
      <div *ngIf="rooms?.availableRooms"> //if this value is greater than 0 it will automatically be true
          Rooms List
      </div> 

    -nullish coalescing : {{ rooms.availableRooms ?? 'No rooms'}}
    if rooms?.availableRooms is undefined then 'No rooms' will be printed otherwise no of available rooms will be

  2-*ngFor
    - we have created a new variable called roomlist which is an array describing each room. When this is displayed
      directly we only see [object] written on the browser. To view them properly we will use ngFor. In the upcoming
      videos we will use Angular Material for better integration.

      <div *ngIf="rooms.availableRooms > 0">
          Rooms List
          <table>
              <tr>
                  <th>Index</th>
                  <th>Even/Odd</th>
                  <th>Room Number</th>
                  <th>Room Type</th>
                  <th>Room Price</th>
                  <th>Room Amenities</th>
                  <th>CheckinTime</th>
              </tr>
              <tr *ngFor="let room of roomList; let e=even; let o = odd ; let i=index">
                  <td>{{i+1}}</td>
                  <td>{{e ? "Even":"Odd"}}</td>
                  <td>{{room.roomNumber}}</td>
                  <td>{{room.roomType}}</td>
                  <td>{{room.price}}</td>
                  <td>{{room.amenities}}</td>
                  <td>{{room.checkInTime}}</td>
              </tr>
          </table>
      </div>

  3.*ngSwitch : just like switch case
     a variable role is made in app.component.ts and this is accessed in app.component.html to render respective view
    
    <div [ngSwitch]="role"> //"role" = variable
      <div *ngSwitchCase="'user'">Welcome User !</div> //"'user'" = string literal
      <div *ngSwitchCase="'admin'"><hinv-rooms></hinv-rooms></div>
      <div *ngSwitchDefault>Please Login first !!</div>
    </div>

  4. ngClass : create two classes in rooms.component.scss : 
                .even { background-color: steelblue; color: white;}
                .odd {background-color: tomato;color: white;}
      modify the tr which holds the table data as follows  
      <tr 
            [ngClass]="e? 'even': 'odd'"
            *ngFor="let room of roomList; let e=even; let o = odd ; let i=index"
      >

  5. ngStyle : used to add styles inline :
      <div
        [ngStyle]="{'color' : rooms.availableRooms? 'green' : 'red'}" 
        [innerText]="numberOfRooms"
      >                                           

-----------Pipes-----------

- https://angular.io/guide/architecture-components#pipes
- pipes are used for data transformations
- pipes dont change actual object

- Built in Pipes
  1 DatePipe 
    - <td>{{room.checkInTime | date : 'short'}}</td>
    - more on https://angular.io/api/common/DatePipe

  2 uppercase | lowercase | titlecase
  3 currency : 'INR'
  4 percent : 1 is 100 % , 0.5 is 50 %
  5 JsonPipe : {{roomList | json}} //should be used for debugging purpose only
  6 SlicePipe : {{roomList | slice : 0:1 | json}} //use slice for serverside pagination
  7 AsyncPipe : //later on
  8 number : <td>{{room.rating | number : '1.0-1'}}</td> 
              //0 - 1 indicates the min - max number of place after decimal point to round off to.
              //In some countries , is used instead of . as decimal separator - we can do so as well.

---------Adding Bootstrap----------
- We are going to use ngx bootstrap - an implementation for angular
- if we are inside the hotelinventory app we will automatically use the local angular cli i.e @13 and not the global @16
- use the command : ng add ngx-bootstrap , to find and download the compatible version of ngx-bootstrap with ang version
- always use the ng command to download third party packages
- if we have downloaded using cli to then we dont need anything else otherwise  
- if you have downloaded bootstrap 5 manually then there are two ways you can go about it:
    1. add @import "~bootstrap/dist/css/bootstrap.min.css" in global stylesheet in src
    2. this method works for adding any kind of css.
       go to angular.json and under your project name in the styles array add the relative path of the stylesheet
       'node_modules/bootstrap/dist/css/bootstrap.min.css"

-------lifecycle Hooks---------

- Component instance has lifecycle hooks which can help you to hook into different events on components
- lifecycle ends when a component is destroyed

- few LifeCycle hooks 
  - ngOnChanges

  - ngOnInit
    - you will notice that for  room.component.ts file there is an interface OnInit which has defined ngOnInit() function
    - in the component class we have a constructor which is invoked first on instance creation.
    - then ngOnInit function is invoked which contains some blocking code (eg.api calls for fetching data to be rendered) 
      which should not be contained in the constructor
    -  

  - ngDoCheck
  - ngAfterContentInit
  - ngAfterContentChecked
  - ngAfterViewInit
  - nfAfterViewChecked
  - ngOnDestroy


- Component Communication
 
  - we are going to create another component inside rooms and then pass the rooms-list information there.
    so that the rooms-list html table becomes reusable.

  - multiple ways to achieve interaction between components :
      
      1. using @Input and @Output 
        - to pass the roomlist value to the room-list component we are going to add the line room-list.comp.ts
          : @Input() rooms : RoomList[] = []; , now rooms variable is availabe to use in the room-list component
        - add the following line in room.component.html for use : <hinv-rooms-list [rooms]="roomList"></hinv-rooms-list>
        - make sure any styles you have defined in rooms.component should be redefined in global stylesheet so that
          it is applied in room-list component too.
        - Rooms is the parent/smart while room-list is child/dumb component.
        - for enterprise code : try to make your component as small as possible ,

        - to output the data from the child component , lets say we are passing info about a room user has selected
          from the room-list component back to the rooms component :

           - add @Output() selectedRoom = new EventEmitter<RoomList>(); in room-list.component.ts
                //This creates a new EventEmitter object and assigns it to the selectedRoom property. 
                  The Output() decorator tells Angular that the selectedRoom property is an output property, which means 
                  that it can be used to emit events to other components.
                //The EventEmitter<RoomList> type tells Angular that the selectedRoom property can emit events that 
                  contain RoomList objects.
                //the selectedRoom is the event , much like click is an event
           
           - selectRoom(room : RoomList){ this.selectedRoom.emit(room); }
                 //we will use the function to trigger the selectedRoom event when the select button is pressed

           - for each row in the table we add a select button :
              <td> <button class="btn btn-primary", (click)="selectRoom(room)"> Select </button></td>
              //when click event is triggered, the 'on' cb will execute the selectRoom() function with room data
                which was clicked on. this selectRoom function will in turn trigger the 'selectedRoom' event as defined prev.
           
           - In the parent component we are binding the selectedRoom event with the printroom function.
              <hinv-rooms-list 
                [rooms]="roomList"
                (selectedRoom)="printRoom($event)" //$event contains the data passed when selectedRoom event is emitted/triggerd
              ></hinv-rooms-list>
              //printroom is the 'on' cb to selectedRoom event much like selectRoom was to click event 

      - using @ViewChild and @ContentChild
      - using Services